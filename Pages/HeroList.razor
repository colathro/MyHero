@page "/herolist/{Id}"

@using MyHero.Controllers
@using MyHero.Data
@using Microsoft.AspNetCore.Identity
@using MyHero.Models
@using Microsoft.Extensions.Options
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext dbcontext;
@inject UserManager<ApplicationUser> UserManager
@inject IOptions<NotificationSettings> notificationSettings;

<div class="container">

    <div class="row m-3">
        <div class="col-lg-10">
            <input type="text" placeholder="Search.." @bind="this.Codename" />
            <button class="btn btn-primary" type="button" @onclick="SearchHeroes">Search</button>
            <button class="btn btn-secondary" type="button" @onclick="ClearSeach">Clear</button>
        </div>
    </div>
    @if (Heroes == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            @foreach (var hero in Heroes)
            {
                <div class="col-lg-4 col-md-6 mb-4">
                    <div class="card h-100">
                        <a href=@GetHeroUrl(hero.Id)><img class="card-img-top" src=@ImageController.GetImage() alt=""></a>
                        <div class="card-body">
                            <h4 class="card-title">
                                <a href=@GetHeroUrl(hero.Id)>@hero.User.FirstName @hero.User.LastName</a>
                            </h4>
                            <div class="container-fluid">
                                @{var tags = TagList(hero.Tags); }
                                @for (int x = 0; x < @tags.Length; x++)
                                {       
                                      <button type="button" class="btn btn-outline-secondary btn-sm">@tags[@x]</button>
                                }
                            </div>
                            <div>
                                <small class="text-muted">@GetSomeRawHtml()</small>
                            </div>
                            <p class="card-text">@hero.Description</p>
                        </div>
                        <div class="card-footer">
                            <div class="btn-group">
                                <button class="btn btn-outline-primary" @onclick="() => SendRequest(hero.Id)">Send Request</button>
                            </div>

                        </div>
                    </div>
                </div>
            }
        </div>
        <!-- /.row -->
    }

</div>
<!-- /.container -->

@code {

    Requestor requestor;
    List<Hero> Heroes;

    string Codename;

    [Parameter]
    public String Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetHeroes();
    }

    public string GetHeroUrl(int id)
    {
        return "/heroprofile/" + id.ToString();
    }

    private string RandomStars()
    {
        Random rand = new Random();
        int x = rand.Next(5);

        string output = "";
        for (int ctr = 0; ctr <= x - 1; ctr++)
        {
            output += "⭐";
        }
        return output;
    }

    public RenderFragment GetSomeRawHtml()
    {
        return builder =>
        {
            builder.AddContent(0, RandomStars());
        };
    }

    private string[] TagList (string tags){
        return tags.Split(';');
    }

    private async Task SendRequest(int heroId)
    {
        var userController = new UserController(dbcontext, notificationSettings);
        await userController.SendRequest(Int32.Parse(Id), heroId);
    }

    private async Task SearchHeroes()
    {
        await GetHeroes();
        Heroes = Heroes.Where(h => h.Tags.ToLower().Contains(this.Codename.ToLower())).Select(h => h).ToList();
    }

    private async Task ClearSeach()
    {
        Codename = "";
        await GetHeroes();
    }

    private async Task GetHeroes()
    {
        var heroCount = new HeroController(dbcontext, notificationSettings);

        Heroes = heroCount.GetHeros(Int32.Parse(Id));
    }

}
